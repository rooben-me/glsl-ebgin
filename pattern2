// cosine based palette, 4 vec3 params
vec3 palette( in float t)
{
    vec3 a = vec3(0.098, 0.360, 1.588);
    vec3 b = vec3(0.828, 0.513, 0.698);
    vec3 c = vec3(0.387, 0.758, -2.351);
    vec3 d = vec3(-1.103, -1.482, -0.592);
  
    return a + b*cos( 6.28318*(c*t+d) );
}

// Main image
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
   // normalize
   // normally 0,0 to 1,1 but we need center to be 0,0 so minus it by 0.5 for all coordinates and where it will give -0.5, -0.5 but the end will be 0.5,0.5 to 0.5,0.5 we dont need that so multiply all by 2 to give -1,-1 to 1,1
   // uv = uv * 2.0;
   // uv = uv - 0.5;
   
   // input
   vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;
   
   // Making new uv for teh gradient ot affect global becuase distance from center
   vec2 uv0 = uv;
   
   vec3 finalColors = vec3(0.0);
   
   
   for(float i = 0.0; i < 4.0; i++) {
   
       // Make repeating pattern
       uv = fract(uv * 1.27) - 0.5;


       // distance from center
       float d = length(uv) + cos(-length(uv0));

       // color 
       vec3 col = palette(cos(length(uv0)) + i*16.+ iTime/4.);


       // making it circle multiply by give radius and time and divided it color
       d = sin(d*2. + iTime/2.)/8.;


       // making it absolute
       d = abs(d);
       

       // glowing and make it contrast
       d = pow(0.01 / d, 1.2);
       
       finalColors += col * d;
   }
   
   
   
   // output
   fragColor = vec4(finalColors,1.0);
}
